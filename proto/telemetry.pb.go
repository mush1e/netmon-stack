// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/telemetry.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscriptionMode int32

const (
	SubscriptionMode_STREAM SubscriptionMode = 0
	SubscriptionMode_ONCE   SubscriptionMode = 1
	SubscriptionMode_POLL   SubscriptionMode = 2
)

// Enum value maps for SubscriptionMode.
var (
	SubscriptionMode_name = map[int32]string{
		0: "STREAM",
		1: "ONCE",
		2: "POLL",
	}
	SubscriptionMode_value = map[string]int32{
		"STREAM": 0,
		"ONCE":   1,
		"POLL":   2,
	}
)

func (x SubscriptionMode) Enum() *SubscriptionMode {
	p := new(SubscriptionMode)
	*p = x
	return p
}

func (x SubscriptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_telemetry_proto_enumTypes[0].Descriptor()
}

func (SubscriptionMode) Type() protoreflect.EnumType {
	return &file_proto_telemetry_proto_enumTypes[0]
}

func (x SubscriptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionMode.Descriptor instead.
func (SubscriptionMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_DOES_NOT_EXIST    ErrorCode = 0
	ErrorCode_PERMISSION_DENIED ErrorCode = 1
	ErrorCode_NOT_ACTIVE        ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "DOES_NOT_EXIST",
		1: "PERMISSION_DENIED",
		2: "NOT_ACTIVE",
	}
	ErrorCode_value = map[string]int32{
		"DOES_NOT_EXIST":    0,
		"PERMISSION_DENIED": 1,
		"NOT_ACTIVE":        2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_telemetry_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_telemetry_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{1}
}

type InterfaceCounters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName string                 `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	BytesRx       int64                  `protobuf:"varint,2,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	BytesTx       int64                  `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	PacketsRx     int64                  `protobuf:"varint,4,opt,name=packets_rx,json=packetsRx,proto3" json:"packets_rx,omitempty"`
	PacketsTx     int64                  `protobuf:"varint,5,opt,name=packets_tx,json=packetsTx,proto3" json:"packets_tx,omitempty"`
	Timestamp     int32                  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceCounters) Reset() {
	*x = InterfaceCounters{}
	mi := &file_proto_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceCounters) ProtoMessage() {}

func (x *InterfaceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceCounters.ProtoReflect.Descriptor instead.
func (*InterfaceCounters) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *InterfaceCounters) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *InterfaceCounters) GetBytesRx() int64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

func (x *InterfaceCounters) GetBytesTx() int64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *InterfaceCounters) GetPacketsRx() int64 {
	if x != nil {
		return x.PacketsRx
	}
	return 0
}

func (x *InterfaceCounters) GetPacketsTx() int64 {
	if x != nil {
		return x.PacketsTx
	}
	return 0
}

func (x *InterfaceCounters) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName string                 `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	IntervalMs    int32                  `protobuf:"varint,2,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"`
	Mode          SubscriptionMode       `protobuf:"varint,3,opt,name=mode,proto3,enum=SubscriptionMode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_proto_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *SubscribeRequest) GetIntervalMs() int32 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

func (x *SubscribeRequest) GetMode() SubscriptionMode {
	if x != nil {
		return x.Mode
	}
	return SubscriptionMode_STREAM
}

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_proto_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_DOES_NOT_EXIST
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SubscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscribeResponse_Counters
	//	*SubscribeResponse_Error
	Response          isSubscribeResponse_Response `protobuf_oneof:"response"`
	ResponseTimestamp int64                        `protobuf:"varint,3,opt,name=response_timestamp,json=responseTimestamp,proto3" json:"response_timestamp,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_proto_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_proto_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeResponse) GetResponse() isSubscribeResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeResponse) GetCounters() *InterfaceCounters {
	if x != nil {
		if x, ok := x.Response.(*SubscribeResponse_Counters); ok {
			return x.Counters
		}
	}
	return nil
}

func (x *SubscribeResponse) GetError() *Error {
	if x != nil {
		if x, ok := x.Response.(*SubscribeResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *SubscribeResponse) GetResponseTimestamp() int64 {
	if x != nil {
		return x.ResponseTimestamp
	}
	return 0
}

type isSubscribeResponse_Response interface {
	isSubscribeResponse_Response()
}

type SubscribeResponse_Counters struct {
	Counters *InterfaceCounters `protobuf:"bytes,1,opt,name=counters,proto3,oneof"`
}

type SubscribeResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*SubscribeResponse_Counters) isSubscribeResponse_Response() {}

func (*SubscribeResponse_Error) isSubscribeResponse_Response() {}

var File_proto_telemetry_proto protoreflect.FileDescriptor

const file_proto_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x15proto/telemetry.proto\"\xcc\x01\n" +
	"\x11InterfaceCounters\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x19\n" +
	"\bbytes_rx\x18\x02 \x01(\x03R\abytesRx\x12\x19\n" +
	"\bbytes_tx\x18\x03 \x01(\x03R\abytesTx\x12\x1d\n" +
	"\n" +
	"packets_rx\x18\x04 \x01(\x03R\tpacketsRx\x12\x1d\n" +
	"\n" +
	"packets_tx\x18\x05 \x01(\x03R\tpacketsTx\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x05R\ttimestamp\"\x81\x01\n" +
	"\x10SubscribeRequest\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x1f\n" +
	"\vinterval_ms\x18\x02 \x01(\x05R\n" +
	"intervalMs\x12%\n" +
	"\x04mode\x18\x03 \x01(\x0e2\x11.SubscriptionModeR\x04mode\"A\n" +
	"\x05Error\x12\x1e\n" +
	"\x04code\x18\x01 \x01(\x0e2\n" +
	".ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xa0\x01\n" +
	"\x11SubscribeResponse\x120\n" +
	"\bcounters\x18\x01 \x01(\v2\x12.InterfaceCountersH\x00R\bcounters\x12\x1e\n" +
	"\x05error\x18\x02 \x01(\v2\x06.ErrorH\x00R\x05error\x12-\n" +
	"\x12response_timestamp\x18\x03 \x01(\x03R\x11responseTimestampB\n" +
	"\n" +
	"\bresponse*2\n" +
	"\x10SubscriptionMode\x12\n" +
	"\n" +
	"\x06STREAM\x10\x00\x12\b\n" +
	"\x04ONCE\x10\x01\x12\b\n" +
	"\x04POLL\x10\x02*F\n" +
	"\tErrorCode\x12\x12\n" +
	"\x0eDOES_NOT_EXIST\x10\x00\x12\x15\n" +
	"\x11PERMISSION_DENIED\x10\x01\x12\x0e\n" +
	"\n" +
	"NOT_ACTIVE\x10\x022H\n" +
	"\x10NetworkTelemetry\x124\n" +
	"\tSubscribe\x12\x11.SubscribeRequest\x1a\x12.SubscribeResponse0\x01B&Z$github.com/mush1e/netmon-stack/protob\x06proto3"

var (
	file_proto_telemetry_proto_rawDescOnce sync.Once
	file_proto_telemetry_proto_rawDescData []byte
)

func file_proto_telemetry_proto_rawDescGZIP() []byte {
	file_proto_telemetry_proto_rawDescOnce.Do(func() {
		file_proto_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_telemetry_proto_rawDesc), len(file_proto_telemetry_proto_rawDesc)))
	})
	return file_proto_telemetry_proto_rawDescData
}

var file_proto_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_telemetry_proto_goTypes = []any{
	(SubscriptionMode)(0),     // 0: SubscriptionMode
	(ErrorCode)(0),            // 1: ErrorCode
	(*InterfaceCounters)(nil), // 2: InterfaceCounters
	(*SubscribeRequest)(nil),  // 3: SubscribeRequest
	(*Error)(nil),             // 4: Error
	(*SubscribeResponse)(nil), // 5: SubscribeResponse
}
var file_proto_telemetry_proto_depIdxs = []int32{
	0, // 0: SubscribeRequest.mode:type_name -> SubscriptionMode
	1, // 1: Error.code:type_name -> ErrorCode
	2, // 2: SubscribeResponse.counters:type_name -> InterfaceCounters
	4, // 3: SubscribeResponse.error:type_name -> Error
	3, // 4: NetworkTelemetry.Subscribe:input_type -> SubscribeRequest
	5, // 5: NetworkTelemetry.Subscribe:output_type -> SubscribeResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_telemetry_proto_init() }
func file_proto_telemetry_proto_init() {
	if File_proto_telemetry_proto != nil {
		return
	}
	file_proto_telemetry_proto_msgTypes[3].OneofWrappers = []any{
		(*SubscribeResponse_Counters)(nil),
		(*SubscribeResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_telemetry_proto_rawDesc), len(file_proto_telemetry_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_telemetry_proto_goTypes,
		DependencyIndexes: file_proto_telemetry_proto_depIdxs,
		EnumInfos:         file_proto_telemetry_proto_enumTypes,
		MessageInfos:      file_proto_telemetry_proto_msgTypes,
	}.Build()
	File_proto_telemetry_proto = out.File
	file_proto_telemetry_proto_goTypes = nil
	file_proto_telemetry_proto_depIdxs = nil
}
